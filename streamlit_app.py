# -*- coding: utf-8 -*-
"""Project PDF.AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19jFUKAbU1-FUP-zNaT8u5dzuiCo3v_dm
"""

# Commented out IPython magic to ensure Python compatibility.
# *****************************************************************************
# INSTALLATIONS
# *****************************************************************************
# Install SDK Google Gen AI.
#!pip -q install google-genai

# Install ADK Google Agents
#!pip install -q google-adk

# Install PyPDF2 Library
#!pip install -q PyPDF2

# *****************************************************************************
# IMPORTS LIBRARY, SDKs, ADK AND FRAMEWORKS
# *****************************************************************************
from google import genai
import os
from google.colab import userdata
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # For create (Content e Part)
import textwrap # For format output text
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # For HTTP requests
import warnings
import PyPDF2 as pdf # For read PDF

warnings.filterwarnings("ignore")

# *****************************************************************************
# FUNCTIONS
# *****************************************************************************

# Function for call AI Agents for utilize Runner for take prompt and get response (UTILIZAR PARA FAZER O QUIS)
def call_agent(agent: Agent, message_text: str) -> str:
    # Create service session in memory
    session_service = InMemorySessionService()
    # Create a new session (you can personalize IDs)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Create a Runner (Agent) for set prompt and get response
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Create a message content
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""

    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Function for text formart Markdown
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

# Function for read PDF in Python with PyPDF2
def read_pdf(file_path):
    try:
        with open(file_path, 'rb') as file:
            reader = pdf.PdfReader(file)
            text = ''
            for page_num in range(len(reader.pages)):
                page = reader.pages[page_num]
                text += page.extract_text()
        return text
    #except ImportError:
        #print("Please install the PyPDF2 library: !pip install PyPDF2")
        #return None
    except Exception as e:
        print(f"Error ao ler PDF: {e}")
        return None


def process_pdf_with_gemini(file_path, prompt):

    pdf_text = read_pdf(file_path)

    if pdf_text:
        # Combine the PDF content and the user's prompt
        full_prompt = f"Aqui est√° o conte√∫do do PDF:\n\n{pdf_text}\n\n{prompt}"

        try:
            # Use the existing clientSDK and MODEL_ID
            response = clientSDK.models.generate_content(
                model=MODEL_ID,
                contents=full_prompt
            )
            return response.text
        except Exception as e:
            print(f"Error ao gerar o conte√∫do: {e}")
            return None
    else:
        return None

# Setting API Key do Google Gemini
os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Create Client SDK
clientSDK = genai.Client()

# Define Gemini Model
MODEL_ID = "gemini-2.0-flash"

# Define prompts
few_shot_prompt="""
    **Contexto e Objetivo:**
Voc√™ √© um **analista e sintetizador de documentos altamente qualificado**, com expertise no assunto do arquivo PDF fornecido.
Sua principal miss√£o √© processar este documento para gerar um **resumo detalhado e de f√°cil compreens√£o**, mantendo a fidelidade
ao conte√∫do original.

**Instru√ß√µes de Processamento Detalhadas:**
1.  **Leitura Integral e Profunda:** Leia o arquivo PDF na sua totalidade, com aten√ß√£o meticulosa a cada linha, par√°grafo, se√ß√£o e cap√≠tulo.
Assegure-se de compreender plenamente a estrutura, o fluxo de argumentos e as nuances do texto.

2.  **Extra√ß√£o de Informa√ß√µes Essenciais:** Durante a leitura, identifique e extraia:
    * **T√≥picos Principais:** As ideias centrais de cada se√ß√£o ou cap√≠tulo.
    * **Conceitos-Chave:** Defini√ß√µes importantes, terminologias espec√≠ficas e suas explica√ß√µes.
    * **Argumentos e Evid√™ncias:** As principais teses apresentadas e os dados ou racioc√≠nios que as sustentam.
    * **Exemplos Cruciais:** Ilustra√ß√µes, estudos de caso ou cen√°rios que ajudam a clarear os conceitos.
    * **Conclus√µes e Recomenda√ß√µes:** Os pontos finais e as implica√ß√µes do conte√∫do.

3.  **Elabora√ß√£o do Resumo Detalhado:**
    * Organize as informa√ß√µes extra√≠das de forma l√≥gica e hier√°rquica, refletindo a estrutura do PDF.
    * Para cada ponto relevante, forne√ßa uma **explica√ß√£o clara e concisa**, utilizando uma linguagem simples e acess√≠vel,
    como se estivesse explicando o conte√∫do a um p√∫blico n√£o especialista.
    * **Mantenha o Contexto:** √â crucial que a simplifica√ß√£o n√£o comprometa o contexto original ou a profundidade das informa√ß√µes.
    * **Inclua Exemplos Relevantes:** Incorpore os exemplos mais importantes para ilustrar os conceitos e facilitar a compreens√£o.
    * **Evite Perdas:** Tenha extremo cuidado para n√£o omitir informa√ß√µes cr√≠ticas, detalhes importantes ou nuances significativas
    do documento original.

4.  **Formato de Sa√≠da:**
    Apresente o resumo utilizando a seguinte estrutura em Markdown, preenchendo as se√ß√µes com o conte√∫do extra√≠do:

```markdown
### Resumo Detalhado do Documento: [T√≠tulo do PDF, se dispon√≠vel, ou "Documento Fornecido"]

**1. Introdu√ß√£o e Contexto Geral:**
[Breve par√°grafo contextualizando o documento, seu prop√≥sito e o que ele aborda.]

**2. Principais Se√ß√µes/Cap√≠tulos e T√≥picos Abordados:**

* **[T√≠tulo da Se√ß√£o/Cap√≠tulo 1]:**
    * **Conceito/Ponto 1.1:** [Explica√ß√£o detalhada e simplificada. Incluir exemplos relevantes aqui.]
    * **Conceito/Ponto 1.2:** [Explica√ß√£o detalhada e simplificada. Incluir exemplos relevantes aqui.]
    * ... (Adicionar mais pontos conforme necess√°rio)

* **[T√≠tulo da Se√ß√£o/Cap√≠tulo 2]:**
    * **Conceito/Ponto 2.1:** [Explica√ß√£o detalhada e simplificada. Incluir exemplos relevantes aqui.]
    * **Conceito/Ponto 2.2:** [Explica√ß√£o detalhada e simplificada. Incluir exemplos relevantes aqui.]
    * ... (Adicionar mais pontos conforme necess√°rio)

* ... (Continuar para todas as se√ß√µes/cap√≠tulos relevantes do PDF)

**3. Conclus√µes Principais e Implica√ß√µes:**
[Um par√°grafo final sintetizando as conclus√µes mais importantes do documento e suas poss√≠veis implica√ß√µes ou recomenda√ß√µes.]

"""

# --- Interface Streamlit ---
#!pip install -q streamlit

import streamlit as st


st.set_page_config(layout="centered", page_title="Sumarizador de PDF com Gemini")

st.markdown(
    """
    <style>
    .main {
        background-color: #f0f2f6;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #45a049;
    }
    .stFileUploader {
        border: 2px dashed #ccc;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        background-color: #fff;
    }
    .stTextArea textarea {
        border-radius: 8px;
        padding: 10px;
        border: 1px solid #ddd;
    }
    .stMarkdown h3 {
        color: #333;
        border-bottom: 2px solid #4CAF50;
        padding-bottom: 5px;
        margin-top: 20px;
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.title("üìö Sumarizador de PDF com API Gemini")
st.markdown("Fa√ßa o upload de um arquivo PDF e receba um resumo detalhado gerado pela API Gemini.")


st.subheader("Upload do Arquivo PDF")
uploaded_file = st.file_uploader("Escolha um arquivo PDF", type="pdf")

if uploaded_file is not None:
    st.success(f"Arquivo '{uploaded_file.name}' carregado com sucesso!")

    if st.button("Sumarizar"):
        with st.spinner("Gerando resumo... Isso pode levar alguns momentos."):
          summary_result = process_pdf_with_gemini(uploaded_file, few_shot_prompt)

          if summary_result:
              st.subheader("Sumariza√ß√£o Realizada:")
              st.markdown(summary_result)
          else:
              st.error("N√£o foi poss√≠vel gerar a sumariza√ß√£o.")

